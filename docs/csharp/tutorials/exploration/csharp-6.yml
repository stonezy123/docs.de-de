### YamlMime:Tutorial
title: 'Einführung in C# 6: interaktives C#-Tutorial'
metadata:
  title: 'Einführung in C# 6: Lernen Sie die neuen Features in C# 6 in einem interaktiven Tutorial im Browser kennen.'
  description: In diesem Tutorial verwenden Sie Ihren Browser, um C# 6 interaktiv kennenzulernen. Sie lernen die neuen Idiome von C# 6 kennen, mit denen Sie präziseren und lesbareren Code schreiben können.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  ms.topic: interactive-tutorial
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 12dca7f213fb8e448818b3f8dd54baf4ea2a7a20
  ms.sourcegitcommit: b59237ca4ec763969a0dd775a3f8f39f8c59fe24
  ms.translationtype: HT
  ms.contentlocale: de-DE
  ms.lasthandoff: 10/12/2020
  ms.locfileid: "91955641"
items:
- durationInMinutes: 1
  content: >
    In diesem Tutorial lernen Sie interaktiv die Grundlagen von C# 6 kennen, indem Sie mit Ihrem Browser C#-Code schreiben und die Ergebnisse der Kompilierung und Ausführung Ihres Codes sehen. Einige Lektionen sind eine Abwandlung früherer C#-Übungen mit den neueren, präziseren Features von C# 6. Im weiteren Verlauf dieses Artikels finden Sie eine Übersicht über die einzelnen Features, in der jeweils ein Link enthalten ist, über den Sie weitere Informationen zum Feature erhalten.
- title: Zulassen von schreibgeschütztem Verhalten mit schreibgeschützten automatisch implementierten Eigenschaften
  durationInMinutes: 2
  content: "Durch die folgenden zwei Verbesserungen an der Syntax für automatisch implementierte Eigenschaften können Sie automatisch implementierte Eigenschaften problemlos vielseitiger einsetzen: schreibgeschützte automatisch implementierte Eigenschaften und Initialisierer für automatisch implementierte Eigenschaften. Sehen Sie sich dieses kleine Programm an:\n\n:::code source=\"snippets/csharp6-starter/Program.cs\" interactive=\"try-dotnet\":::\n    \n Starten Sie den Fokusmodus, und kopieren Sie den oben stehenden Code in der interaktive C#-Fenster. Wählen Sie dann *Ausführen* aus, um zu sehen, was das Ergebnis des Codes ist. `AllCaps` führt leider dazu, dass die Eigenschaftswerte gemeinsam mit der großgeschriebenen Zeichenfolge zurückgegeben werden. Eigentlich wollte der Autor der `Person`-Klasse, dass sie Zeichenfolgen `FirstName` und `LastName` schreibgeschützt sind. Mit C# 6 kann man dies erreichen. Entfernen Sie `private set` aus beiden Eigenschaften, um eine schreibgeschützte automatisch implementierte Eigenschaft zu erstellen. Wählen Sie *Ausführen* aus, dann sehen Sie, dass der Compiler die beiden Positionen erkennt, an denen die Eigenschaften `FirstName` und `LastName` ungewollt geändert wurden. Ändern Sie die `AllCaps`-Methode folgendermaßen, um den Compilerfehler zu beheben:\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\nMit dieser neuen Syntax stellt der Compiler sicher, dass die Eigenschaften unveränderlich sind.\n"
- title: Initialisieren von Unterstützungsfeldern für automatisch implementierte Eigenschaften
  durationInMinutes: 1
  content: >
    Mit der neuen Syntax in C# 6 können Sie Initialisierer für automatisch implementierte Eigenschaften verwenden. Dies wird umso wichtiger je mehr Funktionen Klassen haben. Fügen Sie eine Eigenschaft für einen Zweitnamen und einen Konstruktor hinzu, der Ihrer `Person`-Klasse drei Zeichenfolgen zuweist:


    :::code source="snippets/csharp6-finished/Program.cs" id="MiddleName":::


    Die Zuweisung der `MiddleName`-Eigenschaft ist ein Initialisierer. Dieser initialisiert das vom Compiler generierte Unterstützungsfeld für den Zweitnamen.
- title: Ausdruckskörpermember
  durationInMinutes: 2
  content: >
    Ausdruckskörpermember bieten eine einfache Syntax für einfache Methoden. Die `Person`-Klasse hat zwei geeignete Kandidaten: Sehen Sie sich die Deklaration von `ToString` an:


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    Ersetzen Sie die Deklaration von `ToString` durch den folgenden Code:


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    Versuchen Sie das gleiche mit der `AllCaps`-Methode. Das ist zwar nur eine geringfügige Änderung, aber wenn Sie diese mit Bedacht einsetzen, schreiben Sie sehr viel lesbareren Code, insbesondere für Datenübertragungsobjekte und andere Typen mit geringem Verhalten.
- title: Importieren einer einzigen Klasse
  durationInMinutes: 2
  content: >
    Wenn Sie wiederholt eine statische Methoden einer Klasse im gesamten Code verwenden, wird Ihr Code unübersichtlich, wenn Sie den Klassennamen jedes Mal angeben. Die `Person`-Klasse importiert aktuell den Namespace `System`, obwohl nur <xref:System.Console?displayProperty=nameWithType> verwendet wird. Ändern Sie die `using`-Anweisung folgendermaßen:


    :::code source="snippets/csharp6-finished/Program.cs" id="UsingStatic":::


    Die `static using`-Anweisung ist in größeren Programmen nützlicher, die oft die gleiche Klasse mit vielen statischen Methoden verwenden, wie z. B. die Klassen [`string`](xref:System.String) und <xref:System.Math?displayProperty=nameWithType>.
- title: Verbessertes Zeichenfolgenformat
  durationInMinutes: 2
  content: >
    C# 6 enthält eine neue Syntax zum Zusammensetzen von Zeichenfolgen aus einer Zeichenfolge und eingebetteten Ausdrücken, die mit dem Ziel evaluiert werden, andere Zeichenfolgenwerte auszugeben. Ändern Sie die Methoden `ToString` und `AllCaps`, sodass die folgende Syntax verwendet wird:


    :::code source="snippets/csharp6-finished/Program.cs" id="StringInterpolation":::


    Sie schreiben anstelle positioneller Argumente zwischen `{` und `}` direkt C#-Ausdrücke. Gehen sie genauso für die `Main`-Methode vor. Ersetzen Sie den vorhandenen Code durch folgenden Code:


    :::code source="snippets/csharp6-finished/Program.cs" id="InterpolationMain":::


    Sie sind nicht auf eine einzelne Variable in diesen Ausdrücken beschränkt. Sehen wir uns ein anderes Beispiel an. Wir passen dieses Beispiel an, um andere Ausdrücke zu veranschaulichen, die Sie mit der Zeichenfolgeninterpolation verwenden können. Führen Sie den folgenden Code im interaktiven Fenster in der `Main`-Methode aus:


    :::code source="snippets/csharp6-finished/Program.cs" id="Phrases":::

      Dieser Code verwendet LINQ, daher müssen Sie die folgende using-Anweisung oben im interaktiven Fenster einfügen:

    ```csharp

    using System.Linq;

    ```


    Sie können die lokale Variable `average` entfernen und diese Berechnung im Rahmen des interpolierten Zeichenfolgenausdrucks vornehmen. Ersetzen Sie die letzten beiden Zeilen durch den folgenden Code:


    ```csharp

    WriteLine($"The average word length is: {wordLength.Average()}");

    ```


    Sie bemerken vielleicht, dass die Ausgabe von `Average`, die im vorherigen Beispiel ausgeführt wird, mehr Dezimalstellen hat, als Ihnen lieb ist. Die Zeichenfolgen-Interpolationssyntax unterstützt alle verfügbaren Formatzeichenfolgen mithilfe der vorherigen Formatierungsmethoden. Geben Sie die Formatzeichenfolge innerhalb der Klammern an. Fügen Sie ein `:` nach dem zu formatierenden Ausdruck ein:


    ```csharp

    WriteLine($"The average word length is: {wordLength.Average():F2}");

    ```
- title: Schnelle und einfache NULL-Prüfungen
  durationInMinutes: 2
  content: "Der Operator `?.` (NULL-bedingt) vereinfacht das Schreiben von Logik, die `null`-Werte nahtlos berücksichtigt, ohne zusätzliche `if`-Prüfungen durchführen zu müssen. Kopieren Sie zunächst den folgenden Code in das interaktive Fenster, und führen Sie ihn aus:\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\nDadurch wird eine <xref:System.NullReferenceException> ausgelöst. Ändern Sie den Memberzugriffoperator `.` in den **NULL-bedingten Operator**:\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\nNach dieser Änderung gibt es keine Ausgabe. Dies liegt daran, dass das Ergebnis von `s?.Length` ein `int?` ist, wenn das Ergebnis von `s.Length` ein `int` ist. In diesem Beispiel ist `s?.Length``null`. Der Operator `?.` gibt `null` zurück, wenn dessen linker Operand `null` ist. Der `?.`-Operator gibt einen Nullable-Typ für diesen Typ zurück, sowohl für Werttypen als auch für Nicht-Nullable-Verweistypen. Neben `?.` können Sie auch `?[]` für Array- oder Indexerzugriff verwenden. Testen Sie den folgenden Code im interaktiven Fenster:\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n Mehrere bedingte Operatoren können in einem Ausdruck kombiniert werden. Ein linker Operand, der `null` ist, führt zu einem `null`-Ergebnis, sodass Sie eingebettete if-Klauseln für den Zugriff auf Member von Membern vermeiden können. Testen Sie z. B.den folgenden Code im interaktiven Fenster:\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue && hasMore.Value);\n ```\n\n Sie können dieses Beispiel noch vereinfachen, indem Sie den **NULL-Sammeloperator** verwenden, um einen Standardwert anzugeben:\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n Mit dem **NULL-bedingten Operator** können Sie Code mit präziser Logik schreiben, während gleichzeitig nahtlos auf `null`-Werte geprüft wird.\n"
- title: Ausnahmefilter
  durationInMinutes: 2
  content: "Mit Ausnahmefiltern können Sie Ausnahmen basierend auf Bedingungen abfangen. Ein typisches Anwendungsgebiet sind z. B. Filtermethoden zum Erfassen aber nicht zum Behandeln von Ausnahmen. Ein Ausnahmefilter ist ein boolescher Ausdruck, der `true` ist, wenn die `catch`-Klausel ausgeführt werden soll, und der `false` ist, wenn die Ausnahme nicht von der `catch`-Klausel abgefangen werden soll. Testen Sie den folgenden Code im interaktiven Fenster: Dieser gibt den Ausnahmetyp und die Meldung in der Konsole aus. Es wird `false` zurückgegeben, was bedeutet, dass die Ausnahme nicht verarbeitet werden kann. Testen Sie den folgenden Code im interaktiven Fenster.\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\nDie Meldung der `LogException`-Methode und die Standardmeldung für Ausnahmen sollten Ihnen nacheinander angezeigt werden. Ändern Sie zum Vergleich den Ausdruck `return false` in `return true`, und führen Sie den Code erneut aus. Jetzt wird die Ausnahme abgefangen und das Programm komplett ausgeführt.\n\nNeben dem Erfassen können Ausnahmefilter auch nützlich sein, wenn eine Eigenschaft der Ausnahme die erforderlichen Maßnahmen vorgibt. Sie können sich z. B. eine <xref:System.AggregateException> ansehen, um deren enthaltene Ausnahmen zu sehen und entsprechende Maßnahmen je nach Ausnahme ergreifen.\n"
- title: Verwenden von nameof
  durationInMinutes: 2
  content: "Der Operator `nameof` gibt den Namen einer beliebigen Variablen, eines Typs oder eines Members eines Typs zurück. Testen Sie den folgenden Code im interaktiven Fenster, und sehen Sie sich das Ergebnis an:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\nDie Ausgabe ist der Name der Variablen oder des Typs. Selbst wenn Sie den vollqualifizierten Typnamen angegeben haben (z. B. `System.String`) gibt der `nameof`-Operator den nicht qualifizierten Namen zurück. Dieses Feature ist besonders nützlich, wenn Sie einen Parameter- oder Eigenschaftennamen in eine Zeichenfolge konvertieren möchten. Beispiele sind das Erfassen des Argumentnamens für das Auslösen einer <xref:System.ArgumentNullException> oder <xref:System.ArgumentException>, oder das Erfassen eines Namens einer geänderten Eigenschaft beim Implementieren von <xref:System.ComponentModel.INotifyPropertyChanged>. \n"
- title: Syntax zum Initialisieren eines neuen Objekts
  durationInMinutes: 2
  content: "Die Syntax des Objektinitialisierers unterstützt jetzt die Initialisierung von *Indexern* und von Eigenschaften und Feldern. Aufgrund dieser Ergänzung wird das Initialisieren von Wörterbüchern und anderen Typen vereinfacht. Beginnen Sie mit einem Wörterbuch. Führen Sie den folgenden Code im interaktiven Fenster aus:\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\nDiese Syntax, mit der ein Wert in einem Indexer festgelegt wird, kann für jeden Typ verwendet werden, der in einem Indexer über einen zugänglichen set-Accessor verfügt.\n\nDank einer zweiten Änderung wurde auch die Aktivierung der Initialisierersyntax für Typen vereinfacht, die Sequenzen darstellen. Auflistungsinitialisierer können für alle Klassen verwendet werden, mit denen <xref:System.Collections.IEnumerable> implementiert wird und die über eine öffentlich zugängliche `Add`-Methode verfügen. Die `Add`-Methode kann jetzt eine Erweiterungsmethode sein. \n\nIm folgenden Beispiel wird ein Szenario für diese Syntax veranschaulicht. Hierbei wird eine `Path`-Klasse erstellt, die `IEnumerable<Point3D>` implementiert und über eine Methode zum Hinzufügen von Punkten mit drei Argumenten verfügt. Mit der `Extensions`-Klasse wird eine zusätzliche `Add`-Methode zum Hinzufügen eines neuen Punkts aus den drei zugehörigen Komponenten erstellt. Aufgrund von Einschränkungen in der Umgebung kann dieses Beispiel derzeit nicht interaktiv ausgeführt werden.\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: Damit haben Sie die Einführung in die neuen Features in C# 6 abgeschlossen. Jetzt können Sie sie selbst in Ihrer eigenen Anwendung ausprobieren.
