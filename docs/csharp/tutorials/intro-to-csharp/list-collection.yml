### YamlMime:Tutorial
title: Informationen zum Verwalten von Datensammlungen mithilfe des generischen Listentyps
metadata:
  title: Datensammlungen – Einführung in das interaktive C#-Tutorial
  description: In diesem Tutorial verwenden Sie Ihren Browser, um sich interaktiv mit C# vertraut zu machen. Sie schreiben direkt im Browser einen C#-Code und sehen dort die Ergebnisse der Kompilierung und Ausführung Ihres Codes.
  audience: Developer
  ms.custom: mvc
  ms.topic: interactive-tutorial
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 26fded8a82771672825825ce5d617ef200f18542
  ms.sourcegitcommit: 636af37170ae75a11c4f7d1ecd770820e7dfe7bd
  ms.translationtype: HT
  ms.contentlocale: de-DE
  ms.lasthandoff: 10/07/2020
  ms.locfileid: "91805101"
items:
- durationInMinutes: 1
  content: >
    In diesem Tutorial lernen Sie interaktiv die Grundlagen von C# kennen, indem Sie mit Ihrem Browser einen C#-Code schreiben und die Ergebnisse der Kompilierung und Ausführung Ihres Codes sehen. Es enthält eine Reihe von Lektionen zum Erstellen, Ändern und Untersuchen von Sammlungen und Arrays.
- title: Erstellen von Listen
  durationInMinutes: 2
  content: >
    Führen Sie den folgenden Code im interaktiven Fenster aus. Wählen Sie die Schaltfläche **Enter focus mode** (Fokusmodus aktivieren) aus. Geben Sie anschließend den folgenden Codeblock in das interaktive Fenster ein (ersetzen Sie `<name>` durch Ihren Namen), und wählen Sie **Ausführen** aus:


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Wenn Sie dies in Ihrer Umgebung ausführen, sollten Sie stattdessen die Anleitungen für die [lokale Version](arrays-and-collections.md) befolgen.


    Sie haben eine Liste mit Zeichenfolgen erstellt, dieser Liste drei Namen hinzugefügt und die Namen in Großbuchstaben ausgegeben. Sie verwenden Konzepte, die Sie in früheren Tutorials kennengelernt haben, um die Liste zu durchlaufen.


    Im Code zum Anzeigen von Namen wird das Feature [Zeichenfolgeninterpolation](../../language-reference/tokens/interpolated.md) genutzt. Wenn Sie einem `string` ein `$`-Zeichen voranstellen, können Sie C#-Code in die Zeichenfolgendeklaration einbetten. Der Wert, den dieser C#-Code generiert, ist eine Zeichenfolge, durch die der C#-Code ersetzt wird. In diesem Beispiel wird `{name.ToUpper()}` mit dem jeweiligen in Großbuchstaben konvertierten Namen ersetzt, da Sie die <xref:System.String.ToUpper%2A?displayProperty=nameWithType>-Methode aufgerufen haben.


    Setzen wir nun unsere Forschungen fort.
- title: Ändern von Listeninhalten
  durationInMinutes: 3
  content: >
    Die Sammlung, die Sie erstellt haben, nutzt den <xref:System.Collections.Generic.List%601>-Typ. Dieser Typ speichert Elementsequenzen. Sie geben den Typ der Elemente zwischen den spitzen Klammern an.


    Ein wichtiger Aspekt dieses <xref:System.Collections.Generic.List%601>-Typs ist, dass er wachsen oder schrumpfen kann, sodass Sie Elemente hinzufügen oder entfernen können. Sie sehen die Ergebnisse, indem Sie den Inhalt ändern, nachdem Sie ihn angezeigt haben. Fügen Sie den folgenden Code unter dem bereits geschriebenen Code hinzu (unter der Schleife, die den Inhalt ausgibt):


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Sie haben am Ende der Liste zwei weitere Namen hinzugefügt. Sie haben auch einen entfernt. In der Ausgabe dieses Codeblocks wird der Anfangsinhalt angezeigt, und anschließend wird eine neue Zeile und der neue Inhalt ausgegeben.


    <xref:System.Collections.Generic.List%601> ermöglicht Ihnen auch, mithilfe des **Indexes** auf einzelne Elemente zu verweisen. Sie greifen mit den Zeichen `[` und `]` auf Elemente zu. Fügen Sie den folgenden Code unter dem Code hinzu, den Sie bereits geschrieben haben, und probieren Sie es aus:


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    Sie haben keine über das Ende der Liste hinausgehenden Zugriffsrechte. Sie können mit der <xref:System.Collections.Generic.List%601.Count%2A>-Eigenschaft überprüfen, wie lang die Liste ist. Fügen Sie folgenden Code hinzu, um es auszuprobieren:


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    Wählen Sie erneut **Ausführen** aus, um die Ergebnisse anzuzeigen. Denken Sie daran, dass die Indizes in C# mit 0 (null) beginnen, sodass der größte gültige Index um eins kleiner ist als die Anzahl der Elemente in der Liste.
- title: Suchen in und Sortieren von Listen
  durationInMinutes: 5
  content: >
    In unseren Beispielen werden relativ kleine Listen verwendet, aber Ihre Anwendungen erstellen möglicherweise häufig Listen mit viel mehr Elementen, die manchmal in die Tausende gehen. Um in diesen größeren Sammlungen Elemente zu finden, müssen Sie die Liste nach verschiedenen Elementen durchsuchen. Die <xref:System.Collections.Generic.List%601.IndexOf%2A>-Methode sucht nach einem Element und gibt den Index des Elements zurück. Wenn das Element nicht in der Liste enthalten ist, gibt `IndexOf` `-1` zurück. Probieren Sie dies aus, um die Funktionsweise kennenzulernen.  Fügen Sie den folgenden Code unter dem Code hinzu, den Sie bereits geschrieben haben:


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");

    Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");

    ```


    Da Sie vielleicht nicht wissen, ob ein Element in der Liste ist, sollten Sie den von <xref:System.Collections.Generic.List%601.IndexOf%2A> zurückgegebenen Index immer überprüfen. Bei `-1` wurde das Element nicht gefunden.


    Die Elemente in der Liste können auch sortiert werden. Die <xref:System.Collections.Generic.List%601.Sort%2A>-Methode sortiert alle Elemente in der Liste in der normalen Reihenfolge (Zeichenfolgen alphabetisch). Fügen Sie diesen Code hinzu, und führen Sie das Programm erneut aus:


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```
- title: Listen mit anderen Typen
  durationInMinutes: 5
  content: >
    Sie haben bisher den `string`-Typ in Listen verwendet. Nun erstellen wir eine <xref:System.Collections.Generic.List%601> mithilfe eines anderen Typs. Zunächst erstellen wir einen Satz von Zahlen. Löschen Sie den bisher geschriebenen Code, und ersetzen Sie ihn durch den folgenden Code:


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    Damit wird eine Liste von Ganzzahlen erstellt und für die ersten beiden Ganzzahlen der Wert 1 festgelegt. Die *Fibonacci-Folge* (Folge von Zahlen) beginnt mit zwei Einsen. Jede nächste Fibonacci-Zahl wird ermittelt, indem die Summe der beiden vorherigen Zahlen gebildet wird. Fügen Sie diesen Code hinzu:


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Wählen Sie **Ausführen**, um die Ergebnisse anzuzeigen.
- title: Herausforderung
  durationInMinutes: 10
  content: >
    Versuchen Sie, einige dieser Konzepte aus dieser Lektion und früheren Lektionen in einen Zusammenhang zu bringen. Erweitern Sie das, was Sie bisher bezüglich Fibonacci-Zahlen erstellt haben. Versuchen Sie, den Code zum Generieren der ersten 20 Zahlen der Sequenz zu schreiben. (Hinweis: Die 20. Fibonacci-Zahl lautet 6765.)
- title: Übung abgeschlossen
  durationInMinutes: 3
  content: >
    Sieht ihr Code ungefähr wie der Folgende aus?


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Mit jeder Iteration der Schleife werden die letzten beiden Ganzzahlen in der Liste summiert, und dieser Wert wird der Liste hinzugefügt. Die Schleife wird wiederholt, bis der Liste 20 Elemente hinzugefügt worden sind.
- content: >-
    Sie haben das interaktive Listentutorial abgeschlossen. Das ist die finale Einführung in das interaktive C#-Tutorial. Sie können die [.NET-Website](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) besuchen, um das .NET Core SDK herunterzuladen, ein Projekt auf Ihrem Computer zu erstellen und mit dem Programmieren fortzufahren. Über den Abschnitt „Nächste Schritte“ gelangen Sie wieder zu diesen Tutorials.


    Weitere Informationen zu [.NET-Sammlungen](../../../standard/collections/index.md) finden Sie in den folgenden Artikeln:

    - [Auswählen eines Auflistungstyps](../../../standard/collections/selecting-a-collection-class.md)

    - [Häufig verwendete Auflistungstypen](../../../standard/collections/commonly-used-collection-types.md)

    - [Verwenden von generischen Auflistungen](../../../standard/collections/when-to-use-generic-collections.md)
